package ua.nure.parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import javax.xml.namespace.QName;

import org.xml.sax.SAXException;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.Unmarshaller;
import ua.nure.album.entity.Album;
import ua.nure.album.entity.Albums;

/**
 * Controller for JAXB.
 *
 * @author D.Kolesnikov, I. Mishcheriakov
 *
 */
public class JAXBParser2 {

	/**
	 * <p><b>JAXB Marshaler supported Properties</b><br></p>
	 * <blockquote>
		 <p>
		 All JAXB Providers are required to support the following set of properties.
		 Some providers may support additional properties.
		 </p><dl>
		   <dt><tt>jaxb.encoding</tt> - value must be a java.lang.String</dt>
		   <dd>The output encoding to use when marshalling the XML data.  The
		               Marshaller will use "UTF-8" by default if this property is not
		       specified.</dd>
		   <dt><tt>jaxb.formatted.output</tt> - value must be a java.lang.Boolean</dt>
		   <dd>This property controls whether or not the Marshaller will format
		       the resulting XML data with line breaks and indentation.  A
		       true value for this property indicates human readable indented
		       xml data, while a false value indicates unformatted xml data.
		       The Marshaller will default to false (unformatted) if this
		       property is not specified.</dd>
		   <dt><tt>jaxb.schemaLocation</tt> - value must be a java.lang.String</dt>
		   <dd>This property allows the client application to specify an
		       xsi:schemaLocation attribute in the generated XML data.  The format of
		       the schemaLocation attribute value is discussed in an easy to
		       understand, non-normative form in
		       <a href="http://www.w3.org/TR/xmlschema-0/#schemaLocation">Section 5.6
		       of the W3C XML Schema Part 0: Primer</a> and specified in
		       <a href="http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions">
		       Section 2.6 of the W3C XML Schema Part 1: Structures</a>.</dd>
		   <dt><tt>jaxb.noNamespaceSchemaLocation</tt> - value must be a java.lang.String</dt>
		   <dd>This property allows the client application to specify an
		       xsi:noNamespaceSchemaLocation attribute in the generated XML
		       data.  The format of the schemaLocation attribute value is discussed in
		       an easy to understand, non-normative form in
		       <a href="http://www.w3.org/TR/xmlschema-0/#schemaLocation">Section 5.6
		       of the W3C XML Schema Part 0: Primer</a> and specified in
		       <a href="http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions">
		       Section 2.6 of the W3C XML Schema Part 1: Structures</a>.</dd>
		   <dt><tt>jaxb.fragment</tt> - value must be a java.lang.Boolean</dt>
		   <dd>This property determines whether or not document level events will be
		       generated by the Marshaller.  If the property is not specified, the
		       default is <tt>false</tt>. This property has different implications depending
		       on which marshal api you are using - when this property is set to true:<br>
		       <ul>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-org.xml.sax.ContentHandler-"><code>marshal(Object,ContentHandler)</code></a> - the Marshaller won't
		             invoke <a href="../../../org/xml/sax/ContentHandler.html#startDocument--"><code>ContentHandler.startDocument()</code></a> and
		             <a href="../../../org/xml/sax/ContentHandler.html#endDocument--"><code>ContentHandler.endDocument()</code></a>.</li>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-org.w3c.dom.Node-"><code>marshal(Object,Node)</code></a> - the property has no effect on this
		             API.</li>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-java.io.OutputStream-"><code>marshal(Object,OutputStream)</code></a> - the Marshaller won't
		             generate an xml declaration.</li>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-java.io.Writer-"><code>marshal(Object,Writer)</code></a> - the Marshaller won't
		             generate an xml declaration.</li>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-javax.xml.transform.Result-"><code>marshal(Object,Result)</code></a> - depends on the kind of
		             Result object, see semantics for Node, ContentHandler, and Stream APIs</li>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-javax.xml.stream.XMLEventWriter-"><code>marshal(Object,XMLEventWriter)</code></a> - the
		             Marshaller will not generate <a href="../../../javax/xml/stream/XMLStreamConstants.html#START_DOCUMENT"><code>XMLStreamConstants.START_DOCUMENT</code></a> and
		             <a href="../../../javax/xml/stream/XMLStreamConstants.html#END_DOCUMENT"><code>XMLStreamConstants.END_DOCUMENT</code></a> events.</li>
		         <li><a href="../../../javax/xml/bind/Marshaller.html#marshal-java.lang.Object-javax.xml.stream.XMLStreamWriter-"><code>marshal(Object,XMLStreamWriter)</code></a> - the
		             Marshaller will not generate <a href="../../../javax/xml/stream/XMLStreamConstants.html#START_DOCUMENT"><code>XMLStreamConstants.START_DOCUMENT</code></a> and
		             <a href="../../../javax/xml/stream/XMLStreamConstants.html#END_DOCUMENT"><code>XMLStreamConstants.END_DOCUMENT</code></a> events.</li>
		       </ul>
		   </dd>
		 </dl>
		 </blockquote>

	 */

	public static void main(String[] args) throws JAXBException, FileNotFoundException, SAXException {
		JAXBContext jc = JAXBContext.newInstance(Const.OBJECT_FACTORY);
		Unmarshaller um = jc.createUnmarshaller();
		Albums albums = (Albums) um.unmarshal(new FileInputStream(Const.XML_FILE));
		System.out.println(albums);
		Album album = albums.getAlbum().get(0);
		Marshaller marshaller = jc.createMarshaller();

		JAXBElement<Album> jalbum = new JAXBElement<>(
				new QName(Const.ALBUMS_NAMESPACE_URI, "album"),
                Album.class, album);

		marshaller.marshal(jalbum, new File("oneAlbum.xml"));
	}
}